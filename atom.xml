<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GLADIUM</title>
  
  <subtitle>用薪火点亮世界</subtitle>
  <link href="https://blog.gladium.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.gladium.cn/"/>
  <updated>2024-05-19T08:16:30.356Z</updated>
  <id>https://blog.gladium.cn/</id>
  
  <author>
    <name>Gladium</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>语雀文档</title>
    <link href="https://blog.gladium.cn/3efb.html"/>
    <id>https://blog.gladium.cn/3efb.html</id>
    <published>2024-05-19T08:16:30.356Z</published>
    <updated>2024-05-19T08:16:30.356Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Markdown-和快捷键覆盖"><a href="#Markdown-和快捷键覆盖" class="headerlink" title="Markdown 和快捷键覆盖"></a>Markdown 和快捷键覆盖</h2><blockquote><p>💡 Tips：语雀支持全功能 markdown 语法，可以点击文档编辑页右下角小键盘查看全部支持的语法和快捷键。</p></blockquote><ul><li>支持导入导出 <code>markdown</code> 文件。</li><li>支持自动识别粘贴的 <code>markdown</code> 格式内容转换为富文本。</li></ul><h2 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h2><blockquote><p>💡 Tips：可通过 markdown 语法（<code>+ `code` + </code> + <code>空格</code>）或者快捷键 <code>ctrl/cmd</code> + <code>E</code>快速插入行内代码。</p></blockquote><p>在文本中使用<code>行内代码</code>，可以顺畅地显示代码变量名。</p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><blockquote><p>💡 Tips：输入<code>/代码块</code>或点击上方工具栏点击上方工具栏<img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/56ff3338319771cb6da677be0a8f8505.png" alt="image.png">，选择「代码块」、插入代码卡片。</p></blockquote><p>代码块同时支持多种颜色主题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> <span class="keyword">extends</span> <span class="title">Sort</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">sort</span>(<span class="params">originalArray</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> array = [...originalArray];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (array.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Init left and right arrays.</span></span><br><span class="line">    <span class="keyword">const</span> leftArray = [];</span><br><span class="line">    <span class="keyword">const</span> rightArray = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Take the first element of array as a pivot.</span></span><br><span class="line">    <span class="keyword">const</span> pivotElement = array.shift();</span><br><span class="line">    <span class="keyword">const</span> centerArray = [pivotElement];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Split all array elements between left, center and right arrays.</span></span><br><span class="line">    <span class="keyword">while</span> (array.length) &#123;</span><br><span class="line">      <span class="keyword">const</span> currentElement = array.shift();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Call visiting callback.</span></span><br><span class="line">      <span class="built_in">this</span>.callbacks.visitingCallback(currentElement);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.comparator.equal(currentElement, pivotElement)) &#123;</span><br><span class="line">        centerArray.push(currentElement);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.comparator.lessThan(currentElement, pivotElement)) &#123;</span><br><span class="line">        leftArray.push(currentElement);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rightArray.push(currentElement);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Sort left and right arrays.</span></span><br><span class="line">    <span class="keyword">const</span> leftArraySorted = <span class="built_in">this</span>.sort(leftArray);</span><br><span class="line">    <span class="keyword">const</span> rightArraySorted = <span class="built_in">this</span>.sort(rightArray);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> leftArraySorted.concat(centerArray, rightArraySorted);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> <span class="keyword">extends</span> <span class="title">Sort</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">sort</span>(<span class="params">originalArray</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> array = [...originalArray];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (array.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Init left and right arrays.</span></span><br><span class="line">    <span class="keyword">const</span> leftArray = [];</span><br><span class="line">    <span class="keyword">const</span> rightArray = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Take the first element of array as a pivot.</span></span><br><span class="line">    <span class="keyword">const</span> pivotElement = array.shift();</span><br><span class="line">    <span class="keyword">const</span> centerArray = [pivotElement];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Split all array elements between left, center and right arrays.</span></span><br><span class="line">    <span class="keyword">while</span> (array.length) &#123;</span><br><span class="line">      <span class="keyword">const</span> currentElement = array.shift();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Call visiting callback.</span></span><br><span class="line">      <span class="built_in">this</span>.callbacks.visitingCallback(currentElement);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.comparator.equal(currentElement, pivotElement)) &#123;</span><br><span class="line">        centerArray.push(currentElement);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.comparator.lessThan(currentElement, pivotElement)) &#123;</span><br><span class="line">        leftArray.push(currentElement);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rightArray.push(currentElement);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Sort left and right arrays.</span></span><br><span class="line">    <span class="keyword">const</span> leftArraySorted = <span class="built_in">this</span>.sort(leftArray);</span><br><span class="line">    <span class="keyword">const</span> rightArraySorted = <span class="built_in">this</span>.sort(rightArray);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> leftArraySorted.concat(centerArray, rightArraySorted);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> <span class="keyword">extends</span> <span class="title">Sort</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">sort</span>(<span class="params">originalArray</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> array = [...originalArray];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (array.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Init left and right arrays.</span></span><br><span class="line">    <span class="keyword">const</span> leftArray = [];</span><br><span class="line">    <span class="keyword">const</span> rightArray = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Take the first element of array as a pivot.</span></span><br><span class="line">    <span class="keyword">const</span> pivotElement = array.shift();</span><br><span class="line">    <span class="keyword">const</span> centerArray = [pivotElement];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Split all array elements between left, center and right arrays.</span></span><br><span class="line">    <span class="keyword">while</span> (array.length) &#123;</span><br><span class="line">      <span class="keyword">const</span> currentElement = array.shift();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Call visiting callback.</span></span><br><span class="line">      <span class="built_in">this</span>.callbacks.visitingCallback(currentElement);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.comparator.equal(currentElement, pivotElement)) &#123;</span><br><span class="line">        centerArray.push(currentElement);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.comparator.lessThan(currentElement, pivotElement)) &#123;</span><br><span class="line">        leftArray.push(currentElement);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rightArray.push(currentElement);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Sort left and right arrays.</span></span><br><span class="line">    <span class="keyword">const</span> leftArraySorted = <span class="built_in">this</span>.sort(leftArray);</span><br><span class="line">    <span class="keyword">const</span> rightArraySorted = <span class="built_in">this</span>.sort(rightArray);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> leftArraySorted.concat(centerArray, rightArraySorted);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><blockquote><p>💡 Tips：输入 <code>/公式</code>或点击上方工具栏点击上方工具栏<img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/56ff3338319771cb6da677be0a8f8505.png" alt="image.png">，选择「公式」、插入公式卡片。</p></blockquote><p>公式支持行内嵌套：<img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/5221cc096f88c6a61f3352f96308af6c.svg">，也支持块级嵌入。<br><img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/01a796f92ec26b3af0376bb04464ef7a.svg"></p><h2 id="画板"><a href="#画板" class="headerlink" title="画板"></a>画板</h2><blockquote><p>💡 Tips：输入<code>/画板</code>或点击上方工具栏<img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/56ff3338319771cb6da677be0a8f8505.png" alt="image.png">，选择「画板」、绘制流程图、架构图等各种图形。</p></blockquote><p><img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/2e4d58c692e4967cb73e55245c1e4adf.jpeg"><br><img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/f962823b05f9678989fa387d673f152c.jpeg"></p><p><img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/51d8680705144647ec386c0f405d0b33.jpeg"></p><h2 id="文本绘图"><a href="#文本绘图" class="headerlink" title="文本绘图"></a>文本绘图</h2><blockquote><p>💡 Tips：输入<code>/文本绘图</code>点击上方工具栏<img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/56ff3338319771cb6da677be0a8f8505.png" alt="image.png">，选择「文本绘图」、插入文本绘图卡片。<br>支持 <a href="https://plantuml.com/">plantuml</a>、<a href="https://mermaid-js.github.io/mermaid/#/">mermaid</a> 等多种格式，点击<code>预览</code>可看到图形。具体代码样式见<a href="https://www.yuque.com/yuque/gpvawt/gantt">说明文档</a>。</p></blockquote><p><img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/11d2fd73b2136ebaf7b87820d769df2f.svg"><img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/48acc23cf4775c304a7e4bef2404e592.svg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Markdown-和快捷键覆盖&quot;&gt;&lt;a href=&quot;#Markdown-和快捷键覆盖&quot; class=&quot;headerlink&quot; title=&quot;Markdown 和快捷键覆盖&quot;&gt;&lt;/a&gt;Markdown 和快捷键覆盖&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;💡 Ti</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.gladium.cn/3eeb.html"/>
    <id>https://blog.gladium.cn/3eeb.html</id>
    <published>2024-05-19T08:16:30.356Z</published>
    <updated>2024-05-19T08:16:30.356Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post11"><a href="#Create-a-new-post11" class="headerlink" title="Create a new post11"></a>Create a new post11</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>基于RTree索引和射线法实现的电子围栏</title>
    <link href="https://blog.gladium.cn/57ca.html"/>
    <id>https://blog.gladium.cn/57ca.html</id>
    <published>2024-04-03T00:00:00.000Z</published>
    <updated>2024-05-19T08:16:57.060Z</updated>
    
    <content type="html"><![CDATA[<p>电子围栏技术被广泛应用于地理围栏、安防监控、无人机限制飞行区域等领域。如何快速而准确地判断一个点是否在一个多边形区域内，是实现电子围栏的核心问题。在车联网场景下，需要用到大量的基于经纬度的电子围栏，特别是多边形围栏，基本上贯穿车辆监控和管理的整个生命周期，且其高频的定位聚焦到平台做云计算，会让简单的射线法消耗庞大的计算资源开销和造成实时积压，因此，反射法结合RTree算法进行粗筛成为高效判断是否在围栏的重要方式。</p><h1 id="射线法"><a href="#射线法" class="headerlink" title="射线法"></a>射线法</h1><p>射线法（Ray Casting）是一种判断点是否在多边形内的经典算法。其基本原理是：从待判断点向任意方向引一条射线，计算该射线与多边形边界的交点数。如果交点数为奇数，则点在多边形内；如果交点数为偶数，则点在多边形外。</p><h2 id="图形说明"><a href="#图形说明" class="headerlink" title="图形说明"></a>图形说明</h2><p>在如下图的一个不规律的多边形中，怎么判断这个点是不是在多边形内部   (😮‍💨别告诉我用肉眼观察……）<br><img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/0a13f4114d581a42223eeb19438b4ba0.png" alt="image.png"><br>针对这个平面内任意闭合曲线，我们都可以直观地认为，曲线把平面分割成了内、外两部分，其中“内”就是我们所谓的多边形区域<br><img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/9b5fc86ec7bcd81305c125138766fbb9.png" alt="image.png"><br>基于这一认识，对于平面内任意一条直线，可以有下面这些结论：</p><ul><li>直线穿越多边形边界时，有且只有两种情况：进入多边形或穿出多边形。</li><li>在仅考虑二维平面的情况下，直线不可能从内部再次进入多边形，或从外部再次穿出多边形，即连续两次穿越边界的情况必然成对。</li><li>直线可以无限延伸，而闭合曲线包围的区域是有限的，因此最后一次穿越多边形边界，一定是穿出多边形，到达外部。</li></ul><p><img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/4f6aea0726b6d32bd50d24c32ad28bc4.png" alt="image.png"></p><h2 id="算法转换"><a href="#算法转换" class="headerlink" title="算法转换"></a>算法转换</h2><ul><li>当射线穿越多边形边界的次数为偶数时，所有第偶数次（包括最后一次）穿越都是穿出，因此所有第奇数次（包括第一次）穿越为穿入，由此可推断点在多边形外部。<br><img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/e1515c24ed94cffd4edf0a159cc949a0.png"></li><li>当射线穿越多边形边界的次数为奇数时，所有第奇数次（包括第一次和最后一次）穿越都是穿出，由此可推断点在多边形内部。<br><img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/ec26c30f1a655f896664691cba653d60.png"></li><li>当点在多边形的线上或者与多变形顶点重合时，通过计算点与两个多边形顶点的连线斜率是否相等即可</li></ul><p><img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/51c479d58862244cd2d1fa95c5f86690.png" alt="image.png"></p><ul><li>当点连续经过了多边形的两个相邻顶点，即射线平行于多边形的一条边，可以通过射线连续经过的两个顶点如果都位于射线以上的一侧，因此这种情况看作没有发生穿越就可以</li></ul><p><img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/38b38293b45562b669c4262e9c366922.png" alt="image.png"></p><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PolygonFence</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Point&gt; vertices;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PolygonFence</span><span class="params">(List&lt;Point&gt; vertices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.vertices = vertices;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInside</span><span class="params">(Point point)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> intersectCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertices.size(); i++) &#123;</span><br><span class="line">            Point start = vertices.get(i);</span><br><span class="line">            Point end = vertices.get((i + <span class="number">1</span>) % vertices.size());</span><br><span class="line">            <span class="keyword">if</span> (isRayIntersectsSegment(point, start, end)) &#123;</span><br><span class="line">                intersectCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (intersectCount % <span class="number">2</span>) == <span class="number">1</span>; <span class="comment">// 奇数表示在多边形内</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRayIntersectsSegment</span><span class="params">(Point point, Point start, Point end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> px = point.getLon();</span><br><span class="line">        <span class="keyword">double</span> py = point.getLat();</span><br><span class="line">        <span class="keyword">double</span> sx = start.getLon();</span><br><span class="line">        <span class="keyword">double</span> sy = start.getLat();</span><br><span class="line">        <span class="keyword">double</span> ex = end.getLon();</span><br><span class="line">        <span class="keyword">double</span> ey = end.getLat();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 边平行于x轴，不相交</span></span><br><span class="line">        <span class="keyword">if</span> (sy == ey) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 点在边的上方或下方</span></span><br><span class="line">        <span class="keyword">if</span> (py &lt; Math.min(sy, ey) || py &gt; Math.max(sy, ey)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算交点的x坐标</span></span><br><span class="line">        <span class="keyword">double</span> xIntersect = sx + (py - sy) * (ex - sx) / (ey - sy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 交点在点的右边</span></span><br><span class="line">        <span class="keyword">return</span> xIntersect &gt; px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="RTree索引"><a href="#RTree索引" class="headerlink" title="RTree索引"></a>RTree索引</h1><p>RTree 是一种广泛应用于空间数据索引的数据结构。它通过将空间数据（如点、矩形等）组织成树形结构，支持快速的区域查询和邻近查询。RTree 的节点分为叶节点和内部节点，叶节点存储实际的数据对象，内部节点存储子节点的最小外包矩形（MBR, Minimum Bounding Rectangle）。</p><h2 id="为什么用RTree索引"><a href="#为什么用RTree索引" class="headerlink" title="为什么用RTree索引"></a>为什么用RTree索引</h2><p>当地理围栏多边形数目较少时，我们可以依次遍历每一个多边形（暴力遍历法），然后用射线法进行判断，这样效率也很高。而当多边形数目较多时，比如有10万个多边形，这个时候需要执行10万次射线法。暴力遍历法效率低下的原因是与每一个多边形都进行了射线法判断，如果能减少射线法的调用次数性能就能提升。因此引入Rtree索引通过粗筛的方法快速找到符合条件的少量多边形，然后对粗筛后的多边形使用射线法判断，这样射线法的执行次数大大降低，效率也能大大提高。</p><blockquote><p>💡对于一维数据我们常常使用索引的方法，比如通过B树索引找到某一个范围区间段，然后对此范围区间段进行遍历查找，对于二维空间数据常常使用空间索引的方法，比如通过R树找到范围区间内的多边形，然后对此范围内的多边形进行精确判断</p></blockquote><h2 id="RTree算法思路"><a href="#RTree算法思路" class="headerlink" title="RTree算法思路"></a>RTree算法思路</h2><ul><li>构建多边形的最小外包矩形（MBR）并用 RTree 进行索引</li></ul><p><img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/7755139ecb115da15249bac4a0b676f0.png" alt="image.png"></p><blockquote><p>💡核心是获取多边形最大的x,y轴坐标，并构建最小外包矩形</p></blockquote><ul><li>将 MBR 划分为多个子矩形，并存储到 RTree 中</li></ul><p><img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/84827c7abf98d9fa2af58b8233de8c7c.png" alt="image.png"></p><blockquote><p>💡多个mbr会有一定的交集，这个正常是被允许的，因为在构建多边形的mbr过程中，会有一点的空间扩充</p></blockquote><ul><li>使用射线法对 RTree 中的子矩形进行过滤，快速判断点是否在多边形内</li></ul><p><img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/9db13b233f942d39434be2f9290acba5.png" alt="image.png"></p><blockquote><p>💡查询流程：</p><ul><li>首先通过R树迅速判断用户所在位置（粗红点）是否被外包矩形覆盖（红色点代表用户所在位置；R树平均查询复杂度为O(Log(N))，N为多边形个数）；</li><li>如果不被任何外包矩形覆盖则返回不在地理围栏多边形内；</li><li>如果被外包矩形覆盖则还需要进一步判断是否在此外包矩形的多边形内部，采用上文提到的射线法判断。</li></ul></blockquote><h2 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h2><ul><li><p>导入maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.davidmoten/rtree --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.davidmoten<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rtree<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>构建RTree</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.davidmoten.rtree.Entry;</span><br><span class="line"><span class="keyword">import</span> com.github.davidmoten.rtree.RTree;</span><br><span class="line"><span class="keyword">import</span> com.github.davidmoten.rtree.geometry.Geometries;</span><br><span class="line"><span class="keyword">import</span> com.github.davidmoten.rtree.geometry.Rectangle;</span><br><span class="line"><span class="keyword">import</span> io.reactivex.Observable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PolygonFence</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 多边形ID或名称</span></span><br><span class="line">    <span class="keyword">private</span> String code; <span class="comment">// 行政编码</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Point&gt; vertices; <span class="comment">// 多边形的顶点列表</span></span><br><span class="line">    <span class="keyword">private</span> RTree&lt;Edge, Rectangle&gt; rTree; <span class="comment">// R树索引</span></span><br><span class="line">    <span class="keyword">private</span> Rectangle boundingBox; <span class="comment">// 多边形的最小外包矩形</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PolygonFence</span><span class="params">(String name, String code, List&lt;Point&gt; vertices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.vertices = vertices;</span><br><span class="line">        <span class="keyword">this</span>.rTree = RTree.create();</span><br><span class="line">        initializeRTree(vertices);</span><br><span class="line">        calculateBoundingBox(vertices);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建rtree索引</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initializeRTree</span><span class="params">(List&lt;Point&gt; vertices)</span> </span>&#123;</span><br><span class="line">        List&lt;Edge&gt; edges = createEdgesFromVertices(vertices);</span><br><span class="line">        <span class="keyword">for</span> (Edge edge : edges) &#123;</span><br><span class="line">            Rectangle rectangle = Geometries.rectangle(</span><br><span class="line">                    Math.min(edge.x1, edge.x2), Math.min(edge.y1, edge.y2),</span><br><span class="line">                    Math.max(edge.x1, edge.x2), Math.max(edge.y1, edge.y2)</span><br><span class="line">            );</span><br><span class="line">            rTree = rTree.add(edge, rectangle);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调试信息：打印所有的边</span></span><br><span class="line">        System.out.println(<span class="string">&quot;All edges added to RTree:&quot;</span>);</span><br><span class="line">        edges.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构建 mbr</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calculateBoundingBox</span><span class="params">(List&lt;Point&gt; vertices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> minX = Double.MAX_VALUE, minY = Double.MAX_VALUE;</span><br><span class="line">        <span class="keyword">double</span> maxX = Double.MIN_VALUE, maxY = Double.MIN_VALUE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Point vertex : vertices) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vertex.getLon() &lt; minX) minX = vertex.getLon();</span><br><span class="line">            <span class="keyword">if</span> (vertex.getLat() &lt; minY) minY = vertex.getLat();</span><br><span class="line">            <span class="keyword">if</span> (vertex.getLon() &gt; maxX) maxX = vertex.getLon();</span><br><span class="line">            <span class="keyword">if</span> (vertex.getLat() &gt; maxY) maxY = vertex.getLat();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        boundingBox = Geometries.rectangle(minX, minY, maxX, maxY);</span><br><span class="line">        System.out.println(<span class="string">&quot;Bounding Box: &quot;</span> + boundingBox);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInside</span><span class="params">(Point p)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先判断点是否在最小外包矩形内</span></span><br><span class="line">        <span class="keyword">if</span> (!boundingBox.contains(p.getLon(), p.getLat())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为了获取可能相交的边，将查询矩形扩大一定的范围</span></span><br><span class="line">        Rectangle searchRect = Geometries.rectangle(Geometries.point(p.getLon(),p.getLat()));</span><br><span class="line">        Integet count = rTree.search(searchRect).map(Entry::value)</span><br><span class="line">                <span class="comment">// 粗筛后使用反射法</span></span><br><span class="line">                .map(fence -&gt; isRayIntersectsSegment(p.getLat(), p.getLon(), fence))</span><br><span class="line">                .count().toBlocking();</span><br><span class="line">        <span class="keyword">return</span> (count % <span class="number">2</span>) == <span class="number">1</span>; <span class="comment">// 奇数表示在多边形内</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Edge&gt; <span class="title">createEdgesFromVertices</span><span class="params">(List&lt;Point&gt; vertices)</span> </span>&#123;</span><br><span class="line">        List&lt;Edge&gt; edges = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertices.size(); i++) &#123;</span><br><span class="line">            Point start = vertices.get(i);</span><br><span class="line">            Point end = vertices.get((i + <span class="number">1</span>) % vertices.size());</span><br><span class="line">            edges.add(<span class="keyword">new</span> Edge(start.getLon(), start.getLat(), end.getLon(), end.getLat()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> edges;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRayIntersectsSegment</span><span class="params">(<span class="keyword">double</span> lat, <span class="keyword">double</span> lon, Edge edge)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> x1 = edge.x1;</span><br><span class="line">        <span class="keyword">double</span> y1 = edge.y1;</span><br><span class="line">        <span class="keyword">double</span> x2 = edge.x2;</span><br><span class="line">        <span class="keyword">double</span> y2 = edge.y2;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Checking intersection with edge: &quot;</span> + edge);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 边平行于x轴，不相交</span></span><br><span class="line">        <span class="keyword">if</span> (y1 == y2) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 点在边的上方或下方，不相交</span></span><br><span class="line">        <span class="keyword">if</span> (y1 &gt; lat &amp;&amp; y2 &gt; lat) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (y1 &lt; lat &amp;&amp; y2 &lt; lat) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 点在边的上方（冗余检查）</span></span><br><span class="line">        <span class="keyword">if</span> (Math.max(y1, y2) &lt; lat) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算交点</span></span><br><span class="line">        <span class="keyword">double</span> xIntersect = x1 + (lat - y1) * (x2 - x1) / (y2 - y1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查是否相交 (包括等于的情况)</span></span><br><span class="line">        <span class="keyword">boolean</span> intersects = xIntersect &gt;= lon;</span><br><span class="line">        System.out.println(<span class="string">&quot;xIntersect: &quot;</span> + xIntersect + <span class="string">&quot;, lon: &quot;</span> + lon + <span class="string">&quot;, intersects: &quot;</span> + intersects);</span><br><span class="line">        <span class="keyword">return</span> intersects;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>Q:大多数应用的地理围栏多边形都比较简单，但有时也会遇到一些特别复杂的多边形，比如单个多边形的边数就超过十几万条，这时候对此复杂多边形执行一次射线法也非常耗时（因为射线法时间复杂度为O(N)，N为多边形边数），这种怎么处理。<br>A:首先对多边形的每条边构建最小外包矩形，然后在这些最小外包矩形基础上构建R树索引（R树索引上的外包矩形未画出），这样射线法求交点的时候首先通过R树判断射线是否与外包矩形相交，最后对R树粗筛后的边进行精确求交判断，时间复杂度从O(N)降到O(Log(N))，大大提高了计算效率。<br><img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/4aa68eed4e1598f9eeaa90643cbc9a42.png" alt="image.png"></p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>基于RTree 实现空间数据的索引，结合射线法进行细粒度判断，即可以大幅提升查询效率，也保证了算法的准确性，极其适用于大规模空间数据的管理和查询。但也存在一些弊端：</p><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>RTree 结构和射线法结合实现起来相对复杂，需要处理多种边界情况，导致复杂性较大。</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>RTree 需要存储大量的节点信息，对于大规模数据可能带来较大的存储开销</p></div><div class="flink"><div class="flink-name">参考文献</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://blog.csdn.net/Form_/article/details/77841534" title="CSDN" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://profile-avatar.csdnimg.cn/c688290fc5284c508133873dd2cd7810_form_.jpg!1" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="CSDN" />              </div>              <div class="flink-item-name">CSDN</div>               <div class="flink-item-desc" title="射线法-判断一个点是否在多边形内部">射线法-判断一个点是否在多边形内部</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://www.cnblogs.com/LBSer/p/4471742.html" title="博客园" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://pic.cnblogs.com/avatar/522490/20150808185035.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="博客园" />              </div>              <div class="flink-item-name">博客园</div>               <div class="flink-item-desc" title="地理围栏算法解析">地理围栏算法解析</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://zhuanlan.zhihu.com/p/691639641" title="知乎" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://picx.zhimg.com/v2-ae79aac0cc200ac018cb4179b232c9cc_l.jpg?source=172ae18b" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="知乎" />              </div>              <div class="flink-item-name">知乎</div>               <div class="flink-item-desc" title="数据结构之R Tree">数据结构之R Tree</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://blog.csdn.net/BXD1314/article/details/122145894" title="CSDN" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://profile-avatar.csdnimg.cn/74f75e8f0a6c4444a00df59a42ee928a_bxd1314.jpg!1" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="CSDN" />              </div>              <div class="flink-item-name">CSDN</div>               <div class="flink-item-desc" title="回转数法-判断一个点是否在多边形内部">回转数法-判断一个点是否在多边形内部</div>            </a>          </div></div></div>]]></content>
    
    
    <summary type="html">在车联网场景下，需要用到大量的基于经纬度的电子围栏，特别是多边形围栏，基本上贯穿车辆监控和管理的整个生命周期，因此使用射线法加上RTree算法粗筛成为高效判断是否在围栏的重要方式。</summary>
    
    
    
    <category term="技术分享" scheme="https://blog.gladium.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="算法" scheme="https://blog.gladium.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="电子围栏" scheme="https://blog.gladium.cn/tags/%E7%94%B5%E5%AD%90%E5%9B%B4%E6%A0%8F/"/>
    
  </entry>
  
  <entry>
    <title>基于栈实现算术表达式的解析与运算</title>
    <link href="https://blog.gladium.cn/f4ef.html"/>
    <id>https://blog.gladium.cn/f4ef.html</id>
    <published>2022-10-20T00:00:00.000Z</published>
    <updated>2024-05-19T08:16:30.356Z</updated>
    
    <content type="html"><![CDATA[<p>算术表达式作为最常用的逻辑运算的写作方式，是一种易用，易理解的规则和数据的组合体。这种组合体对于人来说，理解其中的规则，既可以快速计算出结果，但是在代码中，不同操作符的优先级使得对于算术的字符读取无法按照常规的逐行逐句读取，需要在读取的同时，结合上下文来动态的判断优先级，并进行打标来处理，这种方式会导致频繁的上下文切换和跨字符读取，严重拖慢执行数据。基于此，可以采用后缀表达法来预处理算术表达式。</p><h1 id="后缀表达式转换"><a href="#后缀表达式转换" class="headerlink" title="后缀表达式转换"></a>后缀表达式转换</h1><h2 id="算式分解"><a href="#算式分解" class="headerlink" title="算式分解"></a>算式分解</h2><p>对于一般算式来说，其主要可以分为三部分，分别为 操作符，操作数，操作值，其中：</p><ul><li>操作数：即为算式中的需要计算的数，可以为乘数，也可以为除数等，一切由后续的操作符来定义。</li><li>操作符：即为算式中的计算标识，标识操作数按照何种方式进行组合，同时也定义操作的优先级。</li><li>操作值：即为算式中计算的结果值，作为操作数在操作符不同规则下组合的产物。<blockquote><p>tips：在多级运算中，有时候操作值也会转换为操作数，继续参与接下来的运算。 </p></blockquote></li></ul><h2 id="后缀表达式说明"><a href="#后缀表达式说明" class="headerlink" title="后缀表达式说明"></a>后缀表达式说明</h2><p>在说后缀表达式之前，可以先理解下中缀表达式；</p><ul><li>中缀表达式：即我们日常看到的算法模式，形如  <code>a * (b + c)</code> 这种模式，所有的符号按照执行顺序进行排列，可以很方便的明白其中的规则并进行计算。</li><li>后缀表达式：即将中缀表达的格式按照实际计算的优先级，将操作符进行后置排列，例如 <code>abc+* </code>这种模式，完全排除括号对计算优先级的处理，可以满足计算中<strong>逐句读取，逐句解析，逐句计算</strong>的要求。</li></ul><p>在理解后缀表达式之后，就可以发现这种表达方式在计算机处理中的高效之处，以及其设计的巧妙，合理的解决了括号带来的优先级跳跃的问题和依赖上下文处理的性能损耗问题。以下有部分中缀和后缀表达式的对比，可以先体会下其中的设计思路：</p><table><thead><tr><th><strong>中缀表达式</strong></th><th><strong>后缀表达式</strong></th></tr></thead><tbody><tr><td>A+B-C</td><td>AB+C-</td></tr><tr><td>A*B/C</td><td>AB*C/</td></tr><tr><td>A+B*C</td><td>ABC*+</td></tr><tr><td>A*B+C</td><td>AB*C+</td></tr><tr><td>A*(B+C)</td><td>ABC+*</td></tr><tr><td>A_B+C_D</td><td>AB_CD_+</td></tr><tr><td>(A+B)*(C-D)</td><td>AB+CD-*</td></tr><tr><td>((A+B)*C)-D</td><td>AB+C*D-</td></tr><tr><td>A+B*(C-D/(E+F))</td><td>ABCDEF+/-*+</td></tr></tbody></table><h2 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h2><p>针对不同的算式表达式，在从中缀表达式转换为后缀表达式时，需要遵循一下规则：</p><ul><li>所有的操作数按照顺序进行排列（不改变中缀算式的操作数排列规则）</li><li>遇到操作符时，如果可以直接进行运算的，则将操作符复制到两个操作数后面</li><li>遇到括号这种能够提升优先级的操作符，需要将当前操作符先搁置，待到后续优先级升级的算式操作转换完成后，再将当前操作符复制到后面。</li></ul><h2 id="转换实例"><a href="#转换实例" class="headerlink" title="转换实例"></a>转换实例</h2><p>下面来看几个简单的算式的转换过程</p><h4 id="第一个是-A-B-C-的转换方式"><a href="#第一个是-A-B-C-的转换方式" class="headerlink" title="第一个是 A + B -C 的转换方式"></a>第一个是 <code>A + B -C</code> 的转换方式</h4><table><thead><tr><th><strong>从中缀字符串中读取字符串</strong></th><th><strong>分解中缀表达式过程</strong></th><th><strong>求后缀表达式过程</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>A</td><td>A</td><td>A</td><td></td></tr><tr><td>+</td><td>A+</td><td>A</td><td>读到+，无法运算 搁置</td></tr><tr><td>B</td><td>A+B</td><td>AB</td><td></td></tr><tr><td>-</td><td>A+B-</td><td>AB+</td><td>读到-，可以运算，则可以把+复制到后缀字符串中</td></tr><tr><td>C</td><td>A+B-C</td><td>AB+C</td><td></td></tr><tr><td>END</td><td>A+B-C</td><td>AB+C-</td><td>当读到表达式结尾处，可以复制-</td></tr></tbody></table><h4 id="第二个是-A-B-C-的转换方式"><a href="#第二个是-A-B-C-的转换方式" class="headerlink" title="第二个是 A + B * C 的转换方式"></a>第二个是 <code>A + B * C</code> 的转换方式</h4><table><thead><tr><th><strong>从中缀表达式中读取字符串</strong></th><th><strong>分解中缀表达式过程</strong></th><th><strong>求后缀表达式过程</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>A</td><td>A</td><td>A</td><td></td></tr><tr><td>+</td><td>A+</td><td>A</td><td>读到+，无法运算 搁置</td></tr><tr><td>B</td><td>A+B</td><td>AB</td><td></td></tr><tr><td>*</td><td>A+B*</td><td>AB</td><td>读到*，无法运算 搁置</td></tr><tr><td>C</td><td>A+B*C</td><td>ABC</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td>A+B*C</td><td>ABC*</td><td>看到C,可运算后可以复制*</td></tr><tr><td>END</td><td>A+B*C</td><td>ABC*+</td><td>看到表达式末端时，可以复制+</td></tr></tbody></table><h4 id="第三个是-A-B-C-的转换方式"><a href="#第三个是-A-B-C-的转换方式" class="headerlink" title="第三个是 A * ( B + C ) 的转换方式"></a>第三个是 <code>A * ( B + C )</code> 的转换方式</h4><table><thead><tr><th><strong>从中缀表达式中读取字符串</strong></th><th><strong>分解中缀表达式过程</strong></th><th><strong>求后缀表达式过程</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>A</td><td>A</td><td>A</td><td></td></tr><tr><td>*</td><td>A*</td><td>A</td><td>读到*，无法运算 搁置</td></tr><tr><td>(</td><td>A*(</td><td>A</td><td>读到(，不能复制</td></tr><tr><td>B</td><td>A*(B</td><td>AB</td><td></td></tr><tr><td></td><td>A*(B+</td><td>AB</td><td></td></tr><tr><td>+</td><td>A*(B+C</td><td>ABC</td><td>不能复制+</td></tr><tr><td>C</td><td>A*(B+C)</td><td>ABC+</td><td>看到）时，可以运算，可以复制+</td></tr><tr><td>)</td><td>A*(B+C)</td><td>ABC+*</td><td></td></tr><tr><td>END</td><td>A*(B+C)</td><td>ABC+*</td><td>看到表达式末端时，可以复制*</td></tr></tbody></table><h2 id="算法设计思路"><a href="#算法设计思路" class="headerlink" title="算法设计思路"></a>算法设计思路</h2><p>通过以上简单应用的转换，可以看到，操作数的排列是不用改变的，只有操作符是发生了顺序的变化，同时操作符也需要受到优先级高低的影响，因此在转换过程中，可以考虑使用栈这个结构，将每一个操作符与前一个对比，根据优先级高低，来处理操作符入库或者是复制的操作。</p><blockquote><p>tips: 特别，在转换的过程中，会出现 数值的顺序的颠倒，例如 A/B ，会变为 AB/ ，在栈的结果中，在计算的时候，需要注意减法和除法的值的使用问题。</p></blockquote><p><img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/c8411d033adedd0bc35f56d218bf99f9.jpeg" alt="yuque_diagram.jpg"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 在做后缀解析的过程中，保存操作符 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Stack&lt;String&gt; SYMBOL_STACK = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"><span class="comment">/** 表明符号列表 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; DEFAULT_SYMBOL_LIST = Lists.newArrayList(<span class="string">&quot;+&quot;</span>,<span class="string">&quot;-&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;/&quot;</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LEFT_BRACKET = <span class="string">&quot;(&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RIGHT_BRACKET = <span class="string">&quot;)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">convert</span><span class="params">(String opt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(opt == <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断数据类型</span></span><br><span class="line">    <span class="keyword">if</span>(DEFAULT_SYMBOL_LIST.contains(opt))&#123;</span><br><span class="line">        <span class="comment">// 当opt 为 操作符时</span></span><br><span class="line">        <span class="comment">// 如果栈为空，则直接将当前操作符入库</span></span><br><span class="line">        <span class="keyword">if</span>(SYMBOL_STACK.isEmpty())&#123;</span><br><span class="line">            SYMBOL_STACK.push(opt);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String pop = SYMBOL_STACK.pop();</span><br><span class="line">        <span class="comment">// 如果 取出的 pop 即之前的操作符 优先级高于 当前opt 则表示当前操作数可以运算，则复制取出的操作符</span></span><br><span class="line">        <span class="comment">// 同时将当前操作符入栈</span></span><br><span class="line">        <span class="keyword">if</span>(isMax(pop,opt))&#123;</span><br><span class="line">            SYMBOL_STACK.push(opt);</span><br><span class="line">            <span class="keyword">return</span> pop;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 如果 取出的pop 优先级低于 当前操作符，说明当前 结果不可运算 ，则 将取出的pop 和当前 opt均入栈</span></span><br><span class="line">            SYMBOL_STACK.push(pop);</span><br><span class="line">            SYMBOL_STACK.push(opt);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(LEFT_BRACKET.equals(opt) || RIGHT_BRACKET.equals(opt))&#123;</span><br><span class="line">        <span class="comment">// 当opt 为 左右括号时</span></span><br><span class="line">        <span class="keyword">if</span>(LEFT_BRACKET.equals(opt))&#123;</span><br><span class="line">            <span class="comment">// 左括号 ，则 当前无法计算 则直接将符号入栈即可</span></span><br><span class="line">            SYMBOL_STACK.push(opt);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 右括号 即当前数据可以计算 ，取出 ) 之间所有入栈的 操作符均取栈顶复制到后面</span></span><br><span class="line">            StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            <span class="keyword">while</span> (!SYMBOL_STACK.isEmpty())&#123;</span><br><span class="line">                String pop = SYMBOL_STACK.pop();</span><br><span class="line">                <span class="comment">// 截止到 ( 之前的操作符，主要是解决在多重 (( 的情况下，只复制当前 ( ) 结构内的操作符</span></span><br><span class="line">                <span class="keyword">if</span>(pop.equals(LEFT_BRACKET))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                sb.append(pop);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 操作数 直接按照顺序输出即可</span></span><br><span class="line">        <span class="keyword">return</span> opt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 判断操作符的优先级</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Create in 2022/10/20 16:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMax</span><span class="params">(String max,String min)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SymbolEnum.getLevel(max) &gt;= SymbolEnum.getLevel(min);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="算式计算"><a href="#算式计算" class="headerlink" title="算式计算"></a>算式计算</h1><p>在将算式从中缀表达式转换为后缀表达式之后，再想进行计算就及其的简单了。只需要将操作数不断的入栈，然后遇到操作符之后，从栈中取出两个数，进行计算，然后将操作值再入栈成为操作数，直到结束。以下直接展示代码实现。</p><ul><li><p>不同符号计算的枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SymbolEnum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ADD(<span class="number">1</span>,<span class="string">&quot;+&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a+b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    SUB(<span class="number">1</span>,<span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a-b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    MUL(<span class="number">2</span>,<span class="string">&quot;*&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a*b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    DIV(<span class="number">2</span>,<span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a/b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    LEFT(<span class="number">0</span>,<span class="string">&quot;(&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    RIGHT(<span class="number">0</span>,<span class="string">&quot;)&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> level;</span><br><span class="line">    <span class="keyword">private</span> String symbol;</span><br><span class="line">    SymbolEnum(<span class="keyword">int</span> level, String symbol) &#123;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">        <span class="keyword">this</span>.symbol = symbol;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不同符号实现的抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对不同操作符进行数据运算</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, String symbol)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (SymbolEnum value : SymbolEnum.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(value.symbol.equals(symbol))&#123;</span><br><span class="line">                <span class="keyword">return</span> value.calculate(a,b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取符号的优先级</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getLevel</span><span class="params">(String symbol)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (SymbolEnum value : SymbolEnum.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(value.symbol.equals(symbol))&#123;</span><br><span class="line">                <span class="keyword">return</span> value.level;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>计算结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 在计算结果的时候，保存操作数及操作值 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Stack&lt;Integer&gt; VALUE_STACK = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String test = <span class="string">&quot;(((1+1)-3)+4)*(6+2)&quot;</span>;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= test.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == test.length())&#123;</span><br><span class="line">            <span class="keyword">while</span> (!SYMBOL_STACK.isEmpty())&#123;</span><br><span class="line">                sb.append(SYMBOL_STACK.pop());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(convert(String.valueOf(test.charAt(i))));</span><br><span class="line">    &#125;</span><br><span class="line">    String last = sb.toString();</span><br><span class="line">    System.out.println(sb.toString());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; last.length(); i++) &#123;</span><br><span class="line">        calculate(String.valueOf(last.charAt(i)));</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(VALUE_STACK.pop());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 对解析后的数据进行计算</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Create in 2022/10/20 16:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">(String opt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(DEFAULT_SYMBOL_LIST.contains(opt))&#123;</span><br><span class="line">        Integer b = VALUE_STACK.pop();</span><br><span class="line">        Integer a = VALUE_STACK.pop();</span><br><span class="line">        <span class="keyword">int</span> calculate = SymbolEnum.calculate(a, b, opt);</span><br><span class="line">        VALUE_STACK.push(calculate);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        VALUE_STACK.push(Integer.parseInt(opt));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><div class="note green icon-padding flat"><i class="note-icon fas fa-fan"></i><p>基于栈的FILO的特性，在处理一些需要等待，而且需要保持整体顺序的算法中，具有着无与伦比的优势和非常大的普适性。</p></div><div class="note green icon-padding flat"><i class="note-icon fas fa-fan"></i><p>对于自然语言到机器语言的转换过程中，根据上下文的理解对于自然语言来说是非常简单的，但是机器语言中，最好是减少上下文的切换，减少逻辑块的优先级跳跃，才能更好的服务于编码和机器执行。</p></div><div class="flink"><div class="flink-name">参考文献</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://blog.csdn.net/qq_22685435/article/details/119276976" title="CSDN" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://profile.csdnimg.cn/1/3/2/3_qq_22685435" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="CSDN" />              </div>              <div class="flink-item-name">CSDN</div>               <div class="flink-item-desc" title="java使用栈解析算术表达式">java使用栈解析算术表达式</div>            </a>          </div></div></div>]]></content>
    
    
    <summary type="html">在很多动态参数及逻辑处理中，常常需要处理形如算术表达式的动态表达式，使用栈的功能对算术表达式转换为后缀表达法，可以快速的完成表达式的结构解析和业务执行。</summary>
    
    
    
    <category term="技术分享" scheme="https://blog.gladium.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="算法" scheme="https://blog.gladium.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="栈" scheme="https://blog.gladium.cn/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>ODX远程诊断平台设计 -- 0.开篇</title>
    <link href="https://blog.gladium.cn/8e1.html"/>
    <id>https://blog.gladium.cn/8e1.html</id>
    <published>2022-10-11T00:00:00.000Z</published>
    <updated>2024-05-19T08:16:30.356Z</updated>
    
    <content type="html"><![CDATA[<p>ODX远程诊断平台设计 – 0.开篇<br>ODX远程诊断平台设计 – 1.平台整体架构设计思路<br>ODX远程诊断平台设计 – 2.odx的json文件解构思路及处理<br>ODX远程诊断平台设计 – 3.基于DDD思路的平台对象构建及初始化<br>ODX远程诊断平台设计 – 4.基于递归算法的解码框架设计<br>ODX远程诊断平台设计 – 5.基于有界队列的编码框架设计<br>ODX远程诊断平台设计 – 6.基于时间轮算法实现的海量定时任务管理<br>ODX远程诊断平台设计 – 7.异步业务的回调整合及逻辑设计<br>ODX远程诊断平台设计 – 8.构建APP交互中业务参数传输链<br>ODX远程诊断平台设计 – 9.架构总结及未来扩展方向</p>]]></content>
    
    
    <summary type="html">在整车售后中，诊断是一种常规且重要的手段，用于判断整车在行驶过程中出现的各类问题，标识不同控制器的各种实时状态，重置或修改车辆部分配置。</summary>
    
    
    
    <category term="架构设计" scheme="https://blog.gladium.cn/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="ODX" scheme="https://blog.gladium.cn/tags/ODX/"/>
    
    <category term="远程诊断" scheme="https://blog.gladium.cn/tags/%E8%BF%9C%E7%A8%8B%E8%AF%8A%E6%96%AD/"/>
    
    <category term="设计" scheme="https://blog.gladium.cn/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>基于时间轮算法实现的定时任务管理</title>
    <link href="https://blog.gladium.cn/8b56.html"/>
    <id>https://blog.gladium.cn/8b56.html</id>
    <published>2022-09-10T00:00:00.000Z</published>
    <updated>2024-05-19T08:16:30.356Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做车联网车辆远程诊断平台，发现平台与TBOX终端通信时需要保持一个心跳机制，与普通的由客户端发起，平台端ack的模式不一样的是本次心跳需要由平台端主动保持，即平台端每隔几秒发送一次心跳到终端设备，正常来说一般采用Java自带的Timer做一个定时即可，但是考虑到终端设备量级过高，在平台保存大量Timer实例对于平台的资源占用会非常多，造成性能低下的问题，于是决定采用时间轮算法的思路来解决这个海量定时器的方案。</p><h1 id="算法说明"><a href="#算法说明" class="headerlink" title="算法说明"></a>算法说明</h1><p>时间轮是一种高效来利用线程资源来进行批量化调度的一种调度模型。把大批量的调度任务全部都绑定到同一个的调度器上面，使用这一个调度器来进行所有任务的管理（manager），触发（trigger）以及运行（runnable）。能够高效的管理各种延时任务，周期任务，通知任务等等。<br>这个算法广泛运用于netty，kafka，akka等需要使用boss/work这种调度线程和工作线程隔离的模式架构中，在我的理解中，就是将原来的每一个Timer实例，作为一个每秒执行，或者每微秒执行的定时器，然后将需要执行的task全部绑定在每个时间刻度上，一旦当定时器执行到该刻度，即可以触发当前刻度上的所有task，利用这种方式节约Timer实例的资源消耗。</p><h1 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h1><p><img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/995a9e44daa7e001d491684e42cfa97d.png" alt="image.png"><br>时间轮算法可以通过上图来描述。假设时间轮大小为10，1s转一格，每格指向一个链表，保存着待执行的任务。<br>假设，当前位于1，现在要添加一个3s后指向的任务，则1+3=4，在第4格的链表中添加一个节点指向任务即可，标识round=0（round表示圈数）。<br>假设，当前位于1，现在要添加一个10s后指向的任务，则（1+10）% 10 = 1，则在第1格添加一个节点指向任务，并标识round=1（round表示圈数），则当时间轮第二次经过第1格时，即会执行任务。<br>时间轮只会执行round=0的任务，并会把该格子上的其他任务的round减1。</p><blockquote><p><strong>Q:为什么时间段是一个圆形？采用环形链表?</strong><br>A:之所以使用环形的数据结构，主要是处理时间跨度很大的问题。假如我们1s是一个时间段，一天24小时，我们需要划分24<em>60</em>60=86400个区间，如果是1个月呢。显然环形结构可以很优雅的处理该问题。<br><img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/a3f10d89003cff2218721f518cfd1e31.png" alt="image.png"><br>如图我们认为这是一个周期为12秒的圆形，每个数字间隔是1s。我们要表示60s就是60/12=5。也就是指针从12开始转5圈。由此可见，一个圆形可以处理任何时间跨度。</p></blockquote><h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><ul><li><p>代码结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">com.gladium.timer</span><br><span class="line">├── Timer                                      // Timer实例接口             </span><br><span class="line">├── TimerTask                                  // task定义父类             </span><br><span class="line">├── TimingWheel                                // 时间调度及队列处理             </span><br><span class="line">├── TimerTaskEntry                             // task定时信息             </span><br><span class="line">├── TimerTaskList                              // task列表管理            </span><br><span class="line">├── CancelCallBackTask                         // task退出执行的任务定义父类            </span><br><span class="line">├── impl                                       </span><br><span class="line">│       └── TimerImpl                          // Timer实现类，管理boss/task线程池             </span><br><span class="line">├── biz                                        // 业务处理            </span><br><span class="line">│       └── HeartBeatTask                      // 心跳业务(需要循环的业务主类)            </span><br><span class="line">│       └── ReturnControllerCallBackTask       // 归还连接(task超时退出时执行检查)             </span><br><span class="line">│       └── TimerWheelPool                     // 业务管控(包含有循环中断，续期等业务封装)</span><br></pre></td></tr></table></figure></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gladium.timer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Timer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加一个延迟任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> task</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(TimerTask task)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调整时间轮</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">advanceClock</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  当前任务数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭时间轮</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gladium.timer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 延时时间 */</span></span><br><span class="line">    <span class="keyword">long</span> delayTime;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 任务运行主类 */</span></span><br><span class="line">    <span class="keyword">private</span> TimerTaskEntry timerTaskEntry;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 退出回调运行主类 */</span></span><br><span class="line">    <span class="keyword">private</span> CancelCallBackTask callBackTask;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 最长运行时间 默认10分钟 */</span></span><br><span class="line">    <span class="keyword">long</span> maxTime = <span class="number">10</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 是否是循环任务 默认否 */</span></span><br><span class="line">    <span class="keyword">boolean</span> isCycle = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimerTask</span><span class="params">(<span class="keyword">long</span> delayTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delayTime = delayTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimerTask</span><span class="params">(<span class="keyword">long</span> delayTime, <span class="keyword">long</span> maxTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delayTime = delayTime;</span><br><span class="line">        <span class="keyword">this</span>.maxTime = maxTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimerTask</span><span class="params">(<span class="keyword">long</span> delayTime, <span class="keyword">long</span> maxTime, <span class="keyword">boolean</span> isCycle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delayTime = delayTime;</span><br><span class="line">        <span class="keyword">this</span>.maxTime = maxTime;</span><br><span class="line">        <span class="keyword">this</span>.isCycle = isCycle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimerTask</span><span class="params">(<span class="keyword">long</span> delayTime, <span class="keyword">long</span> maxTime, <span class="keyword">boolean</span> isCycle,CancelCallBackTask callBackTask)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delayTime = delayTime;</span><br><span class="line">        <span class="keyword">this</span>.maxTime = maxTime;</span><br><span class="line">        <span class="keyword">this</span>.isCycle = isCycle;</span><br><span class="line">        <span class="keyword">this</span>.callBackTask = callBackTask;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>:  直接调用当前对象的退出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: Create in 2022/9/8 9:43</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timerTaskEntry != <span class="keyword">null</span>) &#123;</span><br><span class="line">            timerTaskEntry.remove();</span><br><span class="line">        &#125;</span><br><span class="line">        timerTaskEntry = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>:  调用子类的判断方法 用于判断当前任务是否结束</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: boolean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: Create in 2022/9/8 9:43</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isCancel</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>:  调用子类的超时时间续期，用于判断是否重置超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: boolean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: Create in 2022/9/8 9:43</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">checkTimeOut</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TimerTaskEntry <span class="title">getTimerTaskEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> timerTaskEntry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setTimerTaskEntry</span><span class="params">(TimerTaskEntry entry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// if this timerTask is already held by an existing timer task entry,</span></span><br><span class="line">        <span class="comment">// we will remove such an entry first.</span></span><br><span class="line">        <span class="keyword">if</span> (timerTaskEntry != <span class="keyword">null</span> &amp;&amp; timerTaskEntry != entry) &#123;</span><br><span class="line">            timerTaskEntry.remove();</span><br><span class="line">        &#125;</span><br><span class="line">        timerTaskEntry = entry;</span><br><span class="line">        <span class="keyword">this</span>.timerTaskEntry = timerTaskEntry;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gladium.timer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.DelayQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimingWheel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> tickMs;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> wheelSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> interval;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> startMs;</span><br><span class="line">    <span class="keyword">private</span> AtomicInteger taskCounter;</span><br><span class="line">    <span class="keyword">private</span> DelayQueue queue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> currentTime;</span><br><span class="line">    <span class="keyword">private</span> TimerTaskList[] buckets;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> TimingWheel overflowWheel;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tickMs 轮子每个格子的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wheelSize 每个轮子的大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startMs 开始时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> taskCounter 任务计数器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queue 延迟队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimingWheel</span><span class="params">(<span class="keyword">long</span> tickMs, <span class="keyword">int</span> wheelSize, <span class="keyword">long</span> startMs, AtomicInteger taskCounter, DelayQueue queue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tickMs = tickMs;</span><br><span class="line">        <span class="keyword">this</span>.wheelSize = wheelSize;</span><br><span class="line">        <span class="keyword">this</span>.interval = tickMs * wheelSize;</span><br><span class="line">        <span class="keyword">this</span>.startMs = startMs;</span><br><span class="line">        <span class="keyword">this</span>.taskCounter = taskCounter;</span><br><span class="line">        <span class="keyword">this</span>.queue = queue;</span><br><span class="line">        <span class="keyword">this</span>.currentTime = startMs - (startMs % tickMs);</span><br><span class="line">        buckets = <span class="keyword">new</span> TimerTaskList[wheelSize];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wheelSize; i++) &#123;</span><br><span class="line">            buckets[i] = <span class="keyword">new</span> TimerTaskList(taskCounter);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加一个上层时间轮</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addOverflowWheel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (overflowWheel == <span class="keyword">null</span>) &#123;</span><br><span class="line">                overflowWheel = <span class="keyword">new</span> TimingWheel(interval, wheelSize, startMs, taskCounter, queue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timerTaskEntry</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(TimerTaskEntry timerTaskEntry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> expiration = timerTaskEntry.expirationMs;</span><br><span class="line">        <span class="keyword">boolean</span> res = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (timerTaskEntry.cancelled()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (expiration &lt; currentTime + tickMs) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (expiration &lt; currentTime + interval) &#123;</span><br><span class="line">            <span class="keyword">long</span> virtualId = expiration / tickMs;</span><br><span class="line">            <span class="keyword">int</span> index = (<span class="keyword">int</span>) (virtualId % wheelSize);</span><br><span class="line">            TimerTaskList bucket = buckets[index];</span><br><span class="line">            bucket.add(timerTaskEntry);</span><br><span class="line">            <span class="keyword">if</span> (bucket.setExpiration(virtualId * tickMs)) &#123;</span><br><span class="line">                queue.offer(bucket);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (overflowWheel == <span class="keyword">null</span>) &#123;</span><br><span class="line">                addOverflowWheel();</span><br><span class="line">            &#125;</span><br><span class="line">            overflowWheel.add(timerTaskEntry);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间推进</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeMs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">advanceClock</span><span class="params">(<span class="keyword">long</span> timeMs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timeMs &gt;= currentTime + tickMs) &#123;</span><br><span class="line">            currentTime = timeMs - (timeMs % tickMs);</span><br><span class="line">            <span class="comment">// Try to advance the clock of the overflow wheel if present</span></span><br><span class="line">            <span class="keyword">if</span> (overflowWheel != <span class="keyword">null</span>) &#123;</span><br><span class="line">                overflowWheel.advanceClock(currentTime);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gladium.timer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTaskEntry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    TimerTask timerTask;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> expirationMs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> firstExecuteTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> TimerTaskList list;</span><br><span class="line">    TimerTaskEntry next;</span><br><span class="line">    TimerTaskEntry prev;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimerTaskEntry</span><span class="params">(TimerTask timerTask, <span class="keyword">long</span> expirationMs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.timerTask = timerTask;</span><br><span class="line">        <span class="keyword">this</span>.expirationMs = expirationMs;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.firstExecuteTime == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 在循环时继承之前的首次执行时间</span></span><br><span class="line">            setFirstExecuteTime(Optional.ofNullable(timerTask).map(TimerTask::getTimerTaskEntry).map(TimerTaskEntry::getFirstExecuteTime).filter(p -&gt; p != <span class="number">0</span>).orElse(expirationMs));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (timerTask != <span class="keyword">null</span>) &#123;</span><br><span class="line">            timerTask.setTimerTaskEntry(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重置开始执行时间 为了重置超时时间</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">renewFirstExecuteTime</span><span class="params">(<span class="keyword">long</span> firstExecuteTime)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstExecuteTime = firstExecuteTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setFirstExecuteTime</span><span class="params">(<span class="keyword">long</span> firstExecuteTime)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.firstExecuteTime == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.firstExecuteTime = firstExecuteTime;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cancelled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> timerTask.getTimerTaskEntry() != <span class="keyword">this</span> || timerTask.isCancel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否超过最大的超时时间</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTimeOut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 每次均执行超时检查，主要是调用子类的方法，对超时策略进行修改</span></span><br><span class="line">        timerTask.checkTimeOut();</span><br><span class="line">        <span class="keyword">return</span> firstExecuteTime != <span class="number">0</span> &amp;&amp; ((firstExecuteTime + timerTask.getMaxTime() - timerTask.getDelayTime()) &lt;= System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否执行callback</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExecuteCallBack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> timerTask.getCallBackTask().isExecute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TimerTaskList currentList = list;</span><br><span class="line">        <span class="comment">// If remove is called when another thread is moving the entry from a task entry list to another,</span></span><br><span class="line">        <span class="comment">// this may fail to remove the entry due to the change of value of list. Thus, we retry until the list becomes null.</span></span><br><span class="line">        <span class="comment">// In a rare case, this thread sees null and exits the loop, but the other thread insert the entry to another list later.</span></span><br><span class="line">        <span class="keyword">while</span> (currentList != <span class="keyword">null</span>) &#123;</span><br><span class="line">            currentList.remove(<span class="keyword">this</span>);</span><br><span class="line">            currentList = list;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TimerTask <span class="title">getTimerTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> timerTask;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimerTask</span><span class="params">(TimerTask timerTask)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.timerTask = timerTask;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getFirstExecuteTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firstExecuteTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gladium.timer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Delayed;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTaskList</span> <span class="keyword">implements</span> <span class="title">Delayed</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TimerTaskEntry root = <span class="keyword">new</span> TimerTaskEntry(<span class="keyword">null</span>, -<span class="number">1L</span>);</span><br><span class="line">    <span class="keyword">private</span> AtomicLong expiration = <span class="keyword">new</span> AtomicLong(-<span class="number">1L</span>);</span><br><span class="line">    <span class="keyword">private</span> AtomicInteger taskCounter;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimerTaskList</span><span class="params">(AtomicInteger taskCounter)</span> </span>&#123;</span><br><span class="line">        root.prev = root;</span><br><span class="line">        root.next = root;</span><br><span class="line">        <span class="keyword">this</span>.taskCounter = taskCounter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(TimerTaskEntry timerTaskEntry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> done = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (!done) &#123;</span><br><span class="line">            timerTaskEntry.remove();</span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (timerTaskEntry.list == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    TimerTaskEntry tail = root.prev;</span><br><span class="line">                    timerTaskEntry.next = root;</span><br><span class="line">                    timerTaskEntry.prev = tail;</span><br><span class="line">                    timerTaskEntry.list = <span class="keyword">this</span>;</span><br><span class="line">                    tail.next = timerTaskEntry;</span><br><span class="line">                    root.prev = timerTaskEntry;</span><br><span class="line">                    taskCounter.incrementAndGet();</span><br><span class="line">                    done = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setExpiration</span><span class="params">(<span class="keyword">long</span> expirationMs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> expiration.getAndSet(expirationMs) != expirationMs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpiration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> expiration.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(TimerTaskEntry timerTaskEntry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (timerTaskEntry.list.equals(<span class="keyword">this</span>)) &#123;</span><br><span class="line">                timerTaskEntry.next.prev = timerTaskEntry.prev;</span><br><span class="line">                timerTaskEntry.prev.next = timerTaskEntry.next;</span><br><span class="line">                timerTaskEntry.next = <span class="keyword">null</span>;</span><br><span class="line">                timerTaskEntry.prev = <span class="keyword">null</span>;</span><br><span class="line">                timerTaskEntry.list = <span class="keyword">null</span>;</span><br><span class="line">                taskCounter.decrementAndGet();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">(Consumer&lt;TimerTaskEntry&gt; flush)</span> </span>&#123;</span><br><span class="line">        TimerTaskEntry head = root.next;</span><br><span class="line">        <span class="keyword">while</span>(!head.equals(root)) &#123;</span><br><span class="line">            remove(head);</span><br><span class="line">            flush.accept(head);</span><br><span class="line">            head = root.next;</span><br><span class="line">        &#125;</span><br><span class="line">        expiration.set(-<span class="number">1L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(<span class="number">0</span>, unit.convert(expiration.get() - System.currentTimeMillis(), TimeUnit.MILLISECONDS));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Delayed o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> TimerTaskList) &#123;</span><br><span class="line">            <span class="keyword">return</span> Long.compare(expiration.get(), ((TimerTaskList) o).getExpiration());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gladium.timer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 任务退出后回调方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Create in 2022/9/9 15:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CancelCallBackTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>:  是否可以执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: boolean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: Create in 2022/9/9 15:58</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isExecute</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gladium.timer.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gladium.timer.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.DelayQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReadWriteLock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:  时间轮实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Create in 2022/9/9 16:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerImpl</span> <span class="keyword">implements</span> <span class="title">Timer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ExecutorService taskExecutor;</span><br><span class="line">    <span class="keyword">private</span> ExecutorService bossExecutor;</span><br><span class="line">    <span class="keyword">private</span> DelayQueue&lt;TimerTaskList&gt; delayQueue = <span class="keyword">new</span> DelayQueue&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> AtomicInteger taskCounter = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="keyword">private</span> TimingWheel timingWheel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ReadWriteLock readWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">    <span class="keyword">private</span> Lock readLock = readWriteLock.readLock();</span><br><span class="line">    <span class="keyword">private</span> Lock writeLock = readWriteLock.writeLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimerImpl</span><span class="params">(<span class="keyword">long</span> tickMs, <span class="keyword">int</span> wheelSize, <span class="keyword">long</span> pollInterval)</span> </span>&#123;</span><br><span class="line">        timingWheel = <span class="keyword">new</span> TimingWheel(tickMs, wheelSize, System.currentTimeMillis(), taskCounter, delayQueue);</span><br><span class="line">        taskExecutor = Executors.newFixedThreadPool(<span class="number">100</span>);</span><br><span class="line">        bossExecutor = Executors.newFixedThreadPool(<span class="number">1</span>);</span><br><span class="line">        bossExecutor.submit((Runnable) () -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    advanceClock(pollInterval);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(TimerTask task)</span> </span>&#123;</span><br><span class="line">        readLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            addTimerTaskEntry(<span class="keyword">new</span> TimerTaskEntry(task, task.getDelayTime() + System.currentTimeMillis()));</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            readLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addTimerTaskEntry</span><span class="params">(TimerTaskEntry timerTaskEntry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!timingWheel.add(timerTaskEntry)) &#123;</span><br><span class="line">            <span class="comment">// 校验任务是否退出  校验任务是否超时</span></span><br><span class="line">            <span class="keyword">if</span> ((!timerTaskEntry.cancelled())  &amp;&amp; (!timerTaskEntry.isTimeOut())) &#123;</span><br><span class="line">                taskExecutor.submit(timerTaskEntry.getTimerTask());</span><br><span class="line">                <span class="comment">// 循环任务，则继续提交到下一个时间刻度</span></span><br><span class="line">                <span class="keyword">if</span>(timerTaskEntry.getTimerTask().isCycle())&#123;</span><br><span class="line">                    add(timerTaskEntry.getTimerTask());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                CancelCallBackTask cancelCallBackTask = Optional.ofNullable(timerTaskEntry).map(TimerTaskEntry::getTimerTask).map(TimerTask::getCallBackTask).orElse(<span class="keyword">null</span>);</span><br><span class="line">                <span class="comment">// 执行最后数据结束后的回调方法 中途打断后 无法执行后续回调</span></span><br><span class="line">                <span class="keyword">if</span>(cancelCallBackTask != <span class="keyword">null</span> &amp;&amp; timerTaskEntry != <span class="keyword">null</span> &amp;&amp; timerTaskEntry.isExecuteCallBack())&#123;</span><br><span class="line">                    taskExecutor.submit(cancelCallBackTask);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">advanceClock</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TimerTaskList bucket = delayQueue.poll(timeout, TimeUnit.MILLISECONDS);</span><br><span class="line">        <span class="keyword">boolean</span> res;</span><br><span class="line">        <span class="keyword">if</span> (bucket != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                writeLock.lock();</span><br><span class="line">                <span class="keyword">while</span> (bucket != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    timingWheel.advanceClock(bucket.getExpiration());</span><br><span class="line">                    bucket.flush(<span class="keyword">this</span>::addTimerTaskEntry);</span><br><span class="line">                    bucket = delayQueue.poll();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                writeLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> taskCounter.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        taskExecutor.shutdown();</span><br><span class="line">        bossExecutor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gladium.timer.biz;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.core.KafkaTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 心跳定时任务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Create in 2022/9/8 13:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeartBeatTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> DateTimeFormatter dtf = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HeartBeatTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 默认实例化父类</span></span><br><span class="line">        <span class="keyword">super</span>(DELAY_TIME,MAX_TIME,IS_CYCLE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>:  构建任务对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: Create in 2022/9/8 13:51</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeartBeatTask</span><span class="params">(CancelCallBackTask callBackTask)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(DELAY_TIME,MAX_TIME,IS_CYCLE,callBackTask);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在此处完成具体需执行任务</span></span><br><span class="line">        System.out.println(dtf.format(LocalDateTime.now()) +<span class="string">&quot;  发送心跳&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isCancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 可以采用监听公共类，redis等唯一信息判断true/false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">checkTimeOut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据情况，执行重置超时时间</span></span><br><span class="line">        <span class="keyword">this</span>.getTimerTaskEntry().renewFirstExecuteTime(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gladium.timer.biz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.core.KafkaTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 归还控制权限 心跳任务结束后执行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Create in 2022/9/9 16:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReturnControllerCallBackTask</span> <span class="keyword">extends</span> <span class="title">CancelCallBackTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReturnControllerCallBackTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过监听公共类，redis等数据，校验是否执行循环结束后回调</span></span><br><span class="line">        <span class="comment">// 该校验只会执行一次</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在此处完成循环结束后需要完成的任务</span></span><br><span class="line">        System.out.println(dtf.format(LocalDateTime.now()) +<span class="string">&quot;  默认回调发送归还控制&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gladium.timer.biz;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 时间轮定时任务池</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Create in 2022/9/8 14:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerWheelPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Timer timer= <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>:  新增任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: timerTask</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: Create in 2022/9/8 14:29</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addTask</span><span class="params">(TimerTask timerTask)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(timer == <span class="keyword">null</span>)&#123;</span><br><span class="line">            timer = <span class="keyword">new</span> TimerImpl(<span class="number">1000</span>, <span class="number">10</span>, <span class="number">5000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        timer.add(timerTask);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>:  获取当前任务量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: int</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: Create in 2022/9/8 14:30</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> timer == <span class="keyword">null</span>?<span class="number">0</span>:timer.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>:  退出任务 需要校验是否完成 等任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: Create in 2022/9/8 14:33</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cancelTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> HeartBeatTask().addCancelTask();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>:  续期任务 回调完成 归还控制 等任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: Create in 2022/9/8 14:33</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">renewTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> HeartBeatTask().addRenewTask();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>时间轮算法的高效的管理和较低的资源占用使得此算法成为众多高吞吐，高并发框架的首选，但时间轮算法亦有其弊端：</p><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>精度取决于每一格精度，精度越小误差越小，当随之而来的，精度越小，所能承载的任务时间跨度就越小，即使使用分层时间论，但是层次的切换也会使得效率大打折扣。</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>时间轮无法备份，当服务器宕机时会丢失所有任务。</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>分布式情况下，会出现任务分配不均的问题，同时也无法合理的分配资源和任务的比重。</p></div><div class="flink"><div class="flink-name">参考文献</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://zhuanlan.zhihu.com/p/356647675" title="知乎" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://picx.zhimg.com/v2-a406e6b728fbaa319e59b22a50aca1ca_xl.jpg?source=32738c0c" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="知乎" />              </div>              <div class="flink-item-name">知乎</div>               <div class="flink-item-desc" title="时间轮算法">时间轮算法</div>            </a>          </div></div></div>]]></content>
    
    
    <summary type="html">在心跳，长连接等海量定时器和大批量调度任务场景下，基于时间轮算法的定时任务管理模型是一个能够有效的降低服务器资源占用和完成高效调度的手段。</summary>
    
    
    
    <category term="技术分享" scheme="https://blog.gladium.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="算法" scheme="https://blog.gladium.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="java" scheme="https://blog.gladium.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>语雀云端写作 Hexo+Github Actions+COS持续集成</title>
    <link href="https://blog.gladium.cn/4880.html"/>
    <id>https://blog.gladium.cn/4880.html</id>
    <published>2022-01-19T00:00:00.000Z</published>
    <updated>2022-01-19T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>测试一下自动更新修改等和git定时任务发布，哈哈哈11111111113333555666<br>测试自动发布 发布测试测试<br>自动触发github1111</p><p>使用一下按钮 <kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>del</kbd>  这个是很 <strong>重要的</strong> 的用法<br>同时可以使用 <samp>样本文本</samp> </p><p><em>强调文本</em><br><br><strong>加粗文本</strong><br><br><dfn>定义项目</dfn><br><br><code>一段电脑代码 print("Hello World")</code><br><br><samp>计算机样本</samp><br><br><kbd>键盘输入</kbd><br><br><var>变量</var><br><code>main</code><br>==keyWords==</p><dl>    <dt>Definition list</dt>    <dd>Is something people use sometimes.</dd><pre><code>&lt;dt&gt;Markdown in HTML&lt;/dt&gt;&lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;</code></pre></dl><p>华丽的<em>分割线111</em></p><hr><div class="flink"><div class="flink-name">友情连接</div><div class="flink-desc">哪些人</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://blog.gladium.cn" title="JECC" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://jerryc.me/img/avatar.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="JECC" />              </div>              <div class="flink-item-name">JECC</div>               <div class="flink-item-desc" title="测试">测试</div>            </a>          </div></div></div><p><img src="https://blog-1256354278.cos.ap-shanghai.myqcloud.com/blog-images/50bae534377ec2ae9ae23f6362cbb8a8.jpeg" alt="W_2014_357.jpg"></p>]]></content>
    
    
    <summary type="html">Hexo终极玩法语雀云端写作配合webhook+腾讯云函数+Hexo+Github Actions+COS静态网+CDN持续集成的个人博客部署方案</summary>
    
    
    
    <category term="技术分享" scheme="https://blog.gladium.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="CI/CD" scheme="https://blog.gladium.cn/tags/CI-CD/"/>
    
    <category term="Hexo" scheme="https://blog.gladium.cn/tags/Hexo/"/>
    
  </entry>
  
</feed>
